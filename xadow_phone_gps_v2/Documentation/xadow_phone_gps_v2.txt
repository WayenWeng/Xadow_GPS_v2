=============================================================================
List of generated methods in project: xadow_phone_gps_v2

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "clockMan1" (component fsl_clock_manager)
   - clockMan1_CLOCK_SYS_SetOutDiv1 -Sets the clock out divider1 setting(OUTDIV1).
   - clockMan1_CLOCK_SYS_GetOutDiv1 -Gets the clock out divider1 setting(OUTDIV1).
   - clockMan1_CLOCK_SYS_SetOutDiv4 -Sets the clock out divider4 setting(OUTDIV4).
   - clockMan1_CLOCK_SYS_GetOutDiv4 -Gets the clock out divider4 setting(OUTDIV4).
   - clockMan1_CLOCK_SYS_SetOutDiv -Sets the clock out dividers setting.
   - clockMan1_CLOCK_SYS_GetOutDiv -Gets the clock out dividers setting.
   - clockMan1_CLOCK_SYS_GetFllClockFreq -Get the MCGFLLCLK clock frequency.
   - clockMan1_CLOCK_SYS_GetFixedFreqClockFreq -Gets the MCGFFCLK clock frequency.
   - clockMan1_CLOCK_SYS_GetInternalRefClockFreq -Get internal reference clock frequency.
   - clockMan1_CLOCK_SYS_GetOsc0ExternalRefClockFreq -Gets the OSC0ERCLK frequency.
   - clockMan1_CLOCK_SYS_GetCopFreq -Gets the COP clock frequency.
   - clockMan1_CLOCK_SYS_GetLptmrFreq -Gets LPTMRx pre-scaler/glitch filter clock frequency.
   - clockMan1_CLOCK_SYS_GetTpmFreq -Gets TPM clock frequency.
   - clockMan1_CLOCK_SYS_SetTpmSrc -Set the TPM clock source selection.
   - clockMan1_CLOCK_SYS_GetTpmSrc -Get the TPM clock source selection.
   - clockMan1_CLOCK_SYS_GetTpmExternalFreq -Get the TPM external clock source frequency.
   - clockMan1_CLOCK_SYS_SetTpmExternalSrc -Set the TPM external clock source selection.
   - clockMan1_CLOCK_SYS_GetTpmExternalSrc -Set the TPM external clock source selection.
   - clockMan1_CLOCK_SYS_GetSpiFreq -Gets the clock frequency for SPI module.
   - clockMan1_CLOCK_SYS_GetI2cFreq -Gets the clock frequency for I2C module.
   - clockMan1_CLOCK_SYS_GetLpsciFreq -Gets the clock frequency for LPSCI module.
   - clockMan1_CLOCK_SYS_SetLpsciSrc -Set the LPSCI clock source selection.
   - clockMan1_CLOCK_SYS_GetLpsciSrc -Get the LPSCI clock source selection.
   - clockMan1_CLOCK_SYS_GetAdcAltFreq -Gets ADC alternate clock frequency.
   - clockMan1_CLOCK_SYS_GetGpioFreq -Gets the clock frequency for GPIO module.
   - clockMan1_CLOCK_SYS_GetCmpFreq -Gets the clock frequency for CMP module.
   - clockMan1_CLOCK_SYS_GetFtfFreq -Gets the clock frequency for FTF module. (Flash Memory)
   - clockMan1_CLOCK_SYS_EnablePortClock -Enable the clock for PORT module.
   - clockMan1_CLOCK_SYS_DisablePortClock -Disable the clock for PORT module.
   - clockMan1_CLOCK_SYS_GetPortGateCmd -Get the the clock gate state for PORT module.
   - clockMan1_CLOCK_SYS_EnableFtfClock -Enable the clock for FTF module.
   - clockMan1_CLOCK_SYS_DisableFtfClock -Disable the clock for FTF module.
   - clockMan1_CLOCK_SYS_GetFtfGateCmd -Get the the clock gate state for FTF module.
   - clockMan1_CLOCK_SYS_EnableAdcClock -Enable the clock for ADC module.
   - clockMan1_CLOCK_SYS_DisableAdcClock -Disable the clock for ADC module.
   - clockMan1_CLOCK_SYS_GetAdcGateCmd -Get the the clock gate state for ADC module.
   - clockMan1_CLOCK_SYS_EnableCmpClock -Enable the clock for CMP module.
   - clockMan1_CLOCK_SYS_DisableCmpClock -Disable the clock for CMP module.
   - clockMan1_CLOCK_SYS_GetCmpGateCmd -Get the the clock gate state for CMP module.
   - clockMan1_CLOCK_SYS_EnableTpmClock -Enable the clock for TPM module.
   - clockMan1_CLOCK_SYS_DisableTpmClock -Disable the clock for TPM module.
   - clockMan1_CLOCK_SYS_GetTpmGateCmd -Get the the clock gate state for TPM module.
   - clockMan1_CLOCK_SYS_EnableLptmrClock -Enable the clock for LPTIMER module.
   - clockMan1_CLOCK_SYS_DisableLptmrClock -Disable the clock for LPTIMER module.
   - clockMan1_CLOCK_SYS_GetLptmrGateCmd -Get the the clock gate state for LPTIMER module.
   - clockMan1_CLOCK_SYS_EnableSpiClock -Enable the clock for SPI module.
   - clockMan1_CLOCK_SYS_DisableSpiClock -Disable the clock for SPI module.
   - clockMan1_CLOCK_SYS_GetSpiGateCmd -Get the the clock gate state for SPI module.
   - clockMan1_CLOCK_SYS_EnableLpsciClock -Enable the clock for LPSCI module.
   - clockMan1_CLOCK_SYS_DisableLpsciClock -Disable the clock for LPSCI module.
   - clockMan1_CLOCK_SYS_GetLpsciGateCmd -Get the the clock gate state for LPSCI module.
   - clockMan1_CLOCK_SYS_EnableI2cClock -Enable the clock for I2C module.
   - clockMan1_CLOCK_SYS_DisableI2cClock -Disable the clock for I2C module.
   - clockMan1_CLOCK_SYS_GetI2cGateCmd -Get the the clock gate state for I2C module.
   - clockMan1_CLOCK_SYS_SetTpmExternalFreq -Set the TPM external clock frequency(TPM_CLKx).
   - clockMan1_CLOCK_SYS_Init -Install pre-defined clock configurations.
   - clockMan1_CLOCK_SYS_UpdateConfiguration -Set system clock configuration according to pre-defined structure.
   - clockMan1_CLOCK_SYS_SetConfiguration -Set system clock configuration.
   - clockMan1_CLOCK_SYS_GetCurrentConfiguration -Get current system clock configuration.
   - clockMan1_CLOCK_SYS_GetErrorCallback -Get the callback which returns error in last clock switch.
   - clockMan1_CLOCK_SYS_SetMcgliteMode -Sets the MCG_Lite to some specific mode.
   - clockMan1_CLOCK_SYS_SetMcgMode -Set MCG to some target mode.
   - clockMan1_CLOCK_SYS_OscInit -Initialize OSC.
   - clockMan1_CLOCK_SYS_OscDeinit -Deinitialize OSC.
   - clockMan1_CLOCK_SYS_SetOscerConfigration -Configure the OSCERCLK.
   - clockMan1_CLOCK_SYS_RtcOscInit -Initialize the RTC OSC.
   - clockMan1_CLOCK_SYS_RtcOscDeinit -Deinitialize RTC OSC.
   - clockMan1_CLOCK_SYS_GetFreq -Gets the clock frequency for a specific clock name.
   - clockMan1_CLOCK_SYS_GetCoreClockFreq -Get core clock frequency.
   - clockMan1_CLOCK_SYS_GetSystemClockFreq -Get system clock frequency.
   - clockMan1_CLOCK_SYS_GetBusClockFreq -Get bus clock frequency.
   - clockMan1_CLOCK_SYS_GetFlashClockFreq -Get flash clock frequency.
   - clockMan1_CLOCK_SYS_GetLpoClockFreq -Get LPO clock frequency.
   - clockMan1_CLOCK_SYS_SetSystickSrc -Set Systick clock source SYST_CSR[CLKSOURCE].
   - clockMan1_CLOCK_SYS_GetSystickFreq -Get Systick clock frequency.

Module "pin_mux"   (component PinSettings)
   - pin_mux_hardware_init -This method configures registers according to settings of routing and electrical features. It 
                provides pin initialization for selected pins during processor start-up. Selected pins are either user selected 
                pins or pins selected in pin properties in components.  Only pins of devices  enabled for auto initialization 
                are handled within this method.
   - pin_mux_init_coredebug_pins -CoreDebug method configures registers according to settings  of routing and electrical 
                features. This method is enabled only if any pin of corresponding peripheral type is selected. Selected pins 
                are either user selected pins or pins selected in pin items in components. Call this method code to route 
                desired pins into CoreDebug peripheral.
   - pin_mux_deinit_coredebug_pins -CoreDebug method configures registers according to settings  of routing and electrical 
                features. This method is enabled only if any pin of corresponding peripheral type is selected. Selected pins 
                are either user selected pins or pins selected in pin items in components. Call this method code to route 
                desired pins into CoreDebug peripheral.
   - pin_mux_init_gpio_pins -GPIO method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                GPIOA, GPIOB peripherals.
   - pin_mux_deinit_gpio_pins -GPIO method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                GPIOA, GPIOB peripherals.
   - pin_mux_init_i2c_pins -I2C method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                I2C0, I2C1 peripherals.
   - pin_mux_deinit_i2c_pins -I2C method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                I2C0, I2C1 peripherals.
   - pin_mux_init_rcm_pins -RCM method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into RCM 
                peripheral.
   - pin_mux_deinit_rcm_pins -RCM method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into RCM 
                peripheral.
   - pin_mux_init_uart0_pins -UART0 method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                UART0 peripheral.
   - pin_mux_deinit_uart0_pins -UART0 method configures registers according to settings  of routing and electrical features. 
                This method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either 
                user selected pins or pins selected in pin items in components. Call this method code to route desired pins 
                into UART0 peripheral.

Module "osa1"      (component fsl_os_abstraction)
   - osa1_OSA_PollAllOtherTasks -Calls all task functions one time except for the current task.
   - osa1_DefaultISR -The default interrupt handler installed in vector table.
   - osa1_OSA_SemaCreate -Creates a semaphore with a given value.
   - osa1_OSA_SemaWait -Pending a semaphore with timeout.
   - osa1_OSA_SemaPost -Signals for someone waiting on the semaphore to wake up.
   - osa1_OSA_SemaDestroy -Destroys a previously created semaphore.
   - osa1_OSA_MutexCreate -Create an unlocked mutex.
   - osa1_OSA_MutexLock -Waits for a mutex and locks it.
   - osa1_OSA_MutexUnlock -Unlocks a previously locked mutex.
   - osa1_OSA_MutexDestroy -Destroys a previously created mutex.
   - osa1_OSA_EventCreate -Initializes an event object with all flags cleared.
   - osa1_OSA_EventWait -Waits for specified event flags to be set.
   - osa1_OSA_EventSet -Sets one or more event flags.
   - osa1_OSA_EventClear -Clears one or more flags.
   - osa1_OSA_EventGetFlags -Gets event flags status.
   - osa1_OSA_EventDestroy -Destroys a previously created event object.
   - osa1_OSA_TaskCreate -Creates a task.
   - osa1_OSA_TaskDestroy -Destroys a previously created task.
   - osa1_OSA_TaskYield -Puts the active task to the end of scheduler's queue.
   - osa1_OSA_TaskGetHandler -Gets the handler of active task.
   - osa1_OSA_TaskGetPriority -Gets the priority of a task.
   - osa1_OSA_TaskSetPriority -Sets the priority of a task.
   - osa1_OSA_MsgQCreate -Initializes a message queue.
   - osa1_OSA_MsgQPut -Puts a message at the end of the queue.
   - osa1_OSA_MsgQGet -Reads and remove a message at the head of the queue.
   - osa1_OSA_MsgQDestroy -Destroys a previously created queue.
   - osa1_OSA_MemAlloc -Reserves the requested amount of memory in bytes.
   - osa1_OSA_MemAllocZero -Reserves the requested amount of memory in bytes and initializes it to 0.
   - osa1_OSA_MemFree -Releases the memory previously reserved.
   - osa1_OSA_TimeDelay -Delays execution for a number of milliseconds.
   - osa1_OSA_TimeGetMsec -Gets the current time since system boot in milliseconds.
   - osa1_OSA_InstallIntHandler -Installs the interrupt handler.
   - osa1_OSA_EnterCritical -Enters the critical section to ensure some code is not preempted.
   - osa1_OSA_ExitCritical -Exits the critical section.
   - osa1_OSA_Init -Initializes the RTOS services.
   - osa1_OSA_Start -Starts the RTOS.

Module "intMan1"   (component fsl_interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.

Module "gpio1"     (component fsl_gpio_hal)
   - gpio1_GPIO_HAL_SetPinDir -Sets the individual GPIO pin to general input or output.
   - gpio1_GPIO_HAL_SetPortDir -Sets the GPIO port pins to general input or output.
   - gpio1_FGPIO_HAL_SetPinDir -Sets the individual FGPIO pin to general input or output.
   - gpio1_FGPIO_HAL_SetPortDir -Sets the FGPIO port pins to general input or output.
   - gpio1_GPIO_HAL_GetPinDir -Gets the current direction of the individual GPIO pin.
   - gpio1_GPIO_HAL_GetPortDir -Gets the GPIO port pins direction.
   - gpio1_FGPIO_HAL_GetPinDir -Gets the current direction of the individual FGPIO pin.
   - gpio1_FGPIO_HAL_GetPortDir -Gets the FGPIO port pins direction.
   - gpio1_GPIO_HAL_WritePinOutput -Sets the output level of the individual GPIO pin to logic 1 or 0.
   - gpio1_GPIO_HAL_ReadPinOutput -Reads the current pin output.
   - gpio1_GPIO_HAL_SetPinOutput -Sets the output level of the individual GPIO pin to logic 1.
   - gpio1_GPIO_HAL_ClearPinOutput -Clears the output level of the individual GPIO pin to logic 0.
   - gpio1_GPIO_HAL_TogglePinOutput -Reverses the current output logic of the individual GPIO pin.
   - gpio1_GPIO_HAL_WritePortOutput -Sets the output of the GPIO port pins to a specific logic value.
   - gpio1_GPIO_HAL_ReadPortOutput -Reads out all pin output status of the current port.
   - gpio1_GPIO_HAL_SetPortOutput -Sets the output level of the GPIO port pins to logic 1.
   - gpio1_GPIO_HAL_ClearPortOutput -Clears the output level of the GPIO port pins to logic 0.
   - gpio1_GPIO_HAL_TogglePortOutput -Reverses the current output logic of the GPIO port pins.
   - gpio1_FGPIO_HAL_WritePinOutput -Sets the output level of the individual FGPIO pin to logic 1 or 0.
   - gpio1_FGPIO_HAL_ReadPinOutput -Reads the current FGPIOpin output.
   - gpio1_FGPIO_HAL_SetPinOutput -Sets the output level of an individual FGPIO pin to logic 1.
   - gpio1_FGPIO_HAL_ClearPinOutput -Clears the output level of an individual FGPIO pin to logic 0.
   - gpio1_FGPIO_HAL_TogglePinOutput -Reverses the current output logic of an individual FGPIO pin.
   - gpio1_FGPIO_HAL_WritePortOutput -Sets the output of the FGPIO port pins to a specific logic value.
   - gpio1_FGPIO_HAL_ReadPortOutput -Reads out all pin output status of the current port.
   - gpio1_FGPIO_HAL_SetPortOutput -Sets the output level of the FGPIO port pins to logic 1.
   - gpio1_FGPIO_HAL_ClearPortOutput -Clears the output level of the FGPIO port pins to logic 0.
   - gpio1_FGPIO_HAL_TogglePortOutput -Reverses the current output logic of the FGPIO port pins.
   - gpio1_GPIO_HAL_ReadPinInput -Reads the current input value of the individual GPIO pin.
   - gpio1_GPIO_HAL_ReadPortInput -Reads the current input value of a specific GPIO port.
   - gpio1_FGPIO_HAL_ReadPinInput -Gets the current input value of an individual FGPIO pin.
   - gpio1_FGPIO_HAL_ReadPortInput -Gets the current input value of a specific FGPIO port.

Module "lpsci1"    (component fsl_lpsci_hal)
   - lpsci1_LPSCI_HAL_Init -Initializes the LPSCI controller.
   - lpsci1_LPSCI_HAL_EnableTransmitter -Enables the LPSCI transmitter.
   - lpsci1_LPSCI_HAL_DisableTransmitter -Disables the LPSCI transmitter.
   - lpsci1_LPSCI_HAL_IsTransmitterEnabled -Gets the LPSCI transmitter enabled/disabled configuration setting.
   - lpsci1_LPSCI_HAL_EnableReceiver -Enables the LPSCI receiver.
   - lpsci1_LPSCI_HAL_DisableReceiver -Disables the LPSCI receiver.
   - lpsci1_LPSCI_HAL_IsReceiverEnabled -Gets the LPSCI receiver enabled/disabled configuration setting.
   - lpsci1_LPSCI_HAL_SetBaudRate -Configures the LPSCI baud rate.
   - lpsci1_LPSCI_HAL_SetBaudRateDivisor -Sets the LPSCI baud rate modulo divisor value.
   - lpsci1_LPSCI_HAL_SetBitCountPerChar -Configures the number of bits per character in the LPSCI controller.
   - lpsci1_LPSCI_HAL_SetParityMode -Configures the parity mode in LPSCI controller.
   - lpsci1_LPSCI_HAL_SetStopBitCount -Configures the number of stop bits in the LPSCI controller.
   - lpsci1_LPSCI_HAL_SetIntMode -Configures the LPSCI module interrupts to enable/disable various interrupt sources.
   - lpsci1_LPSCI_HAL_GetIntMode -Returns whether the LPSCI module interrupts is enabled/disabled.
   - lpsci1_LPSCI_HAL_GetDataRegAddr -Get LPSCI tx/rx data register address.
   - lpsci1_LPSCI_HAL_Putchar -This function allows the user to send an 8-bit character from the LPSCI data register.
   - lpsci1_LPSCI_HAL_Putchar9 -This function allows the user to send a 9-bit character from the LPSCI data register.
   - lpsci1_LPSCI_HAL_Putchar10 -This function allows the user to send a 10-bit character from the LPSCI data register.
   - lpsci1_LPSCI_HAL_Getchar -This function gets a received 8-bit character from the LPSCI data register.
   - lpsci1_LPSCI_HAL_Getchar9 -This function gets a received 9-bit character from the LPSCI data register.
   - lpsci1_LPSCI_HAL_Getchar10 -This function gets a received 10-bit character from the LPSCI data register.
   - lpsci1_LPSCI_HAL_SendDataPolling -Send out multiple bytes of data using polling method.
   - lpsci1_LPSCI_HAL_ReceiveDataPolling -Receive multiple bytes of data using polling method.
   - lpsci1_LPSCI_HAL_GetStatusFlag -Gets all LPSCI status flag states.
   - lpsci1_LPSCI_HAL_ClearStatusFlag -Clears an individual and specific LPSCI status flag.
   - lpsci1_LPSCI_HAL_SetWaitModeOperation -Configures the LPSCI to either operate or cease to operate in WAIT mode.
   - lpsci1_LPSCI_HAL_GetWaitModeOperation -Determines if the LPSCI operates or ceases to operate in WAIT mode.
   - lpsci1_LPSCI_HAL_SetLoopCmd -Configures the LPSCI loopback operation.
   - lpsci1_LPSCI_HAL_SetReceiverSource -Configures the LPSCI single-wire operation.
   - lpsci1_LPSCI_HAL_SetTransmitterDir -Configures the LPSCI transmit direction while in single-wire mode.
   - lpsci1_LPSCI_HAL_PutReceiverInStandbyMode -Places the LPSCI receiver in standby mode.
   - lpsci1_LPSCI_HAL_PutReceiverInNormalMode -Places the LPSCI receiver in normal mode (disable standby mode operation).
   - lpsci1_LPSCI_HAL_IsReceiverInStandby -Determines if the LPSCI receiver is currently in standby mode.
   - lpsci1_LPSCI_HAL_SetReceiverWakeupMethod -Selects the LPSCI receiver wakeup method (idle-line or address-mark) from 
                standby mode.
   - lpsci1_LPSCI_HAL_GetReceiverWakeupMethod -Gets the LPSCI receiver wakeup method (idle-line or address-mark) from standby 
                mode.
   - lpsci1_LPSCI_HAL_ConfigIdleLineDetect -Configures the operation options of the LPSCI idle line detect.
   - lpsci1_LPSCI_HAL_SetBreakCharTransmitLength -Configures the LPSCI break character transmit length.
   - lpsci1_LPSCI_HAL_SetBreakCharDetectLength -Configures the LPSCI break character detect length.
   - lpsci1_LPSCI_HAL_SetBreakCharCmd -Configures the LPSCI transmit send break character operation.
   - lpsci1_LPSCI_HAL_SetMatchAddress -Configures the LPSCI match address mode control operation. (Note: Feature available on 
                select LPSCI bases)
   - lpsci1_LPSCI_HAL_SetSendMsbFirstCmd -Configures the LPSCI to send data MSB first (Note: Feature available on select LPSCI 
                bases)

Module "i2cCom1"   (component fsl_i2c)
   - i2cCom1_I2C_DRV_IRQHandler -Pass IRQ control to either the master or slave driver.
   - i2cCom1_I2C_DRV_MasterInit -Initializes the I2C master mode driver.
   - i2cCom1_I2C_DRV_MasterDeinit -Shuts down the driver.
   - i2cCom1_I2C_DRV_MasterSetBaudRate -Configures the I2C bus to access a device.
   - i2cCom1_I2C_DRV_MasterSendDataBlocking -Performs a blocking send transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterSendData -Performs a non-blocking send transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterGetSendStatus -Gets the current status of the I2C master transmit.
   - i2cCom1_I2C_DRV_MasterAbortSendData -Terminates a non-blocking I2C Master transmission early.
   - i2cCom1_I2C_DRV_MasterReceiveDataBlocking -Performs a blocking receive transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterReceiveData -Performs a non-blocking receive transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterGetReceiveStatus -Gets the current status of the I2C master receive.
   - i2cCom1_I2C_DRV_MasterReceiveDataPolling -Performs a polling receive transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterSendDataPolling -Performs a polling send transaction on the I2C bus.
   - i2cCom1_I2C_DRV_MasterIRQHandler -The interrupt handler for I2C master mode.
   - i2cCom1_I2C_DRV_SlaveInit -Initializes the I2C module.
   - i2cCom1_I2C_DRV_SlaveDeinit -Shuts down the I2C slave driver.
   - i2cCom1_I2C_DRV_SlaveGetHandler -Gets the i2c slave run-time state structure.
   - i2cCom1_I2C_DRV_SlaveSendData -Sends/transmits data by using a non-blocking method.
   - i2cCom1_I2C_DRV_SlaveSendDataBlocking -Sends (transmits) data by using a blocking method.
   - i2cCom1_I2C_DRV_SlaveReceiveData -Receives the data by using a non-blocking method.
   - i2cCom1_I2C_DRV_SlaveReceiveDataBlocking -Receives data by using a blocking method.
   - i2cCom1_I2C_DRV_SlaveGetReceiveStatus -Gets the current status of the I2C slave driver.
   - i2cCom1_I2C_DRV_SlaveGetTransmitStatus -Gets the current status of the I2C slave driver.
   - i2cCom1_I2C_DRV_SlaveAbortReceiveData -Terminates a non-blocking receive of the I2C slave early.
   - i2cCom1_I2C_DRV_SlaveAbortSendData -Terminates a non-blocking send of the I2C slave early.
   - i2cCom1_I2C_DRV_SlaveIsBusBusy -Gets the current status of the I2C slave bus.
   - i2cCom1_I2C_DRV_SlaveSendDataPolling -Sends out multiple bytes of data using a polling method.
   - i2cCom1_I2C_DRV_SlaveReceiveDataPolling -Receives multiple bytes of data using a polling method.
   - i2cCom1_I2C_DRV_SlaveIRQHandler -The interrupt handler for I2C slave mode.

Module "Cpu"       (component MKL02Z32FG4_4SDK)

===================================================================================
